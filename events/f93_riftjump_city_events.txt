namespace = riftjump_city

#normale RiftJump traveling via decision
planet_event = {
	id = riftjump_city.1
	is_triggered_only = yes

	title = riftjump_city.1.name
	desc = {
		text = riftjump_city.1.desc
		trigger = { exists = event_target:riftjump_target }
	}
	desc = {
		text = riftjump_city.1.desc2
		trigger = { NOT ={ exists = event_target:riftjump_target } }
	}
	picture = GFX_evt_news_room
	immediate = {
		save_event_target_as = riftjump_origin
		solar_system = { set_star_flag = riftjump_city_origin_system }
		#each random_system has fewer and fewer requirements, there should always be a viable path, landing in home systems or near them is the lowest priority
		random_system = {
			limit = {
				NOR = {
					has_star_flag = riftjump_city_origin_system
					exists = owner
					has_star_flag = hostile_system
					has_star_flag = guardian
					has_star_flag = enclave
					has_star_flag = primitive_system
					has_star_flag = lcluster
					has_star_flag = sealed_system
					any_fleet_in_system = {
						owner = {
							is_hostile = root.owner
						}
					}
					any_system_planet = { is_homeworld = yes }
					any_neighbor_system = {
						any_system_planet = { is_homeworld = yes }
					}
				}
				any_system_planet = {
					habitable_planet_not_urban = yes
					num_sapient_pops = 0
				}
			}
			random_system_planet = {
				limit = { habitable_planet_not_urban = yes }
				save_event_target_as = riftjump_target
			}
		}
		random_system = {
			limit = {
				NOR = {
					has_star_flag = riftjump_city_origin_system
					exists = owner
					has_star_flag = hostile_system
					has_star_flag = guardian
					has_star_flag = enclave
					has_star_flag = primitive_system
					has_star_flag = lcluster
					has_star_flag = sealed_system
					any_system_planet = { is_homeworld = yes }
					any_neighbor_system = {
						any_system_planet = { is_homeworld = yes }
					}
				}
				any_system_planet = {
					habitable_planet_not_urban = yes
					num_sapient_pops = 0
				}
			}
			random_system_planet = {
				limit = { habitable_planet_not_urban = yes }
				save_event_target_as = riftjump_target
			}
		}
		random_system = {
			limit = {
				NOR = {
					has_star_flag = riftjump_city_origin_system
					exists = owner
					any_system_planet = { is_homeworld = yes }
				}
				any_system_planet = {
					habitable_planet_not_urban = yes
					num_sapient_pops = 0
				}
			}
			random_system_planet = {
				limit = { habitable_planet_not_urban = yes }
				save_event_target_as = riftjump_target
			}
		}
		random_system = {
			limit = {
				NOR = {
					has_star_flag = riftjump_city_origin_system
					exists = owner
				}
				any_system_planet = {
					habitable_planet_not_urban = yes
					num_sapient_pops = 0
				}
			}
			random_system_planet = {
				limit = { habitable_planet_not_urban = yes }
				save_event_target_as = riftjump_target
			}
		}
	}
	option = {
		name = riftjump_city.1.a
		trigger = { exists = event_target:riftjump_target }
		hidden_effect = { 
			owner = {
				add_modifier = { modifier = afg_demotion days = 2 }
				every_controlled_fleet = {
					limit = {
						is_ship_class = shipclass_starbase
						solar_system = {
							has_star_flag = riftjump_city_origin_system
						}
					}
					destroy_fleet = this
				}
			}
		}
	}

	option = {
		name = riftjump_city.1.b
		trigger = { NOT = { exists = event_target:riftjump_target } }
		owner = { add_resource = { energy = 1000 } }
	}

	after = {
		hidden_effect = {
			if = { limit = { exists = event_target:riftjump_target } 
				event_target:riftjump_target = {
					if = {
						limit = {
							num_free_districts = {
								type = any
								value < 5
							}
						}
						while = {
							count = 4
							random_deposit = { limit = { is_blocker = yes } clear_blocker = yes }
						}
					}
					create_colony = {
						owner = root
						species = root.owner_main_species
						ethos = owner
					}
					solar_system = {
						create_starbase = {
							owner = root
							size = starbase_starport
							module = shipyard
						}
					}
				}
				
				#block to copy buildings
				event_target:riftjump_target = { remove_building = building_colony_shelter }
				event_target:riftjump_target = { remove_building = building_deployment_post }
				event_target:riftjump_target = { remove_building = building_hive_capital }
				if = { limit = { event_target:riftjump_origin = { has_building = building_colony_shelter } } event_target:riftjump_target = { add_building = building_colony_shelter } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_capital } } event_target:riftjump_target = { add_building = building_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_major_capital } } event_target:riftjump_target = { add_building = building_major_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_system_capital } } event_target:riftjump_target = { add_building = building_system_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_deployment_post } } event_target:riftjump_target = { add_building = building_deployment_post } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_machine_capital } } event_target:riftjump_target = { add_building = building_machine_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_machine_major_capital } } event_target:riftjump_target = { add_building = building_machine_major_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_machine_system_capital } } event_target:riftjump_target = { add_building = building_machine_system_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_hive_capital } } event_target:riftjump_target = { add_building = building_hive_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_hive_major_capital } } event_target:riftjump_target = { add_building = building_hive_major_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_resort_capital } } event_target:riftjump_target = { add_building = building_resort_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_resort_major_capital } } event_target:riftjump_target = { add_building = building_resort_major_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_slave_capital } } event_target:riftjump_target = { add_building = building_slave_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_slave_major_capital } } event_target:riftjump_target = { add_building = building_slave_major_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_imperial_capital } } event_target:riftjump_target = { add_building = building_imperial_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_imperial_machine_capital } } event_target:riftjump_target = { add_building = building_imperial_machine_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_imperial_hive_capital } } event_target:riftjump_target = { add_building = building_imperial_hive_capital } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_town_main } } event_target:riftjump_target = { add_building = building_riftjump_town_main } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_city_main } } event_target:riftjump_target = { add_building = building_riftjump_city_main } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_robot_assembly_plant } } event_target:riftjump_target = { add_building = building_robot_assembly_plant } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_robot_assembly_complex } } event_target:riftjump_target = { add_building = building_robot_assembly_complex } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_machine_assembly_plant } } event_target:riftjump_target = { add_building = building_machine_assembly_plant } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_machine_assembly_complex } } event_target:riftjump_target = { add_building = building_machine_assembly_complex } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_spawning_pool } } event_target:riftjump_target = { add_building = building_spawning_pool } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_offspring_nest } } event_target:riftjump_target = { add_building = building_offspring_nest } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_necrophage_elevation_chamber } } event_target:riftjump_target = { add_building = building_necrophage_elevation_chamber } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_necrophage_house_of_apotheosis } } event_target:riftjump_target = { add_building = building_necrophage_house_of_apotheosis } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_clone_vats } } event_target:riftjump_target = { add_building = building_clone_vats } }
				while = {
					count = 5
					if = { limit = { event_target:riftjump_origin = { has_building = building_clone_army_clone_vat } } event_target:riftjump_target = { add_building = building_clone_army_clone_vat } }
					event_target:riftjump_origin = { remove_building = building_clone_army_clone_vat }
				}
				if = { limit = { event_target:riftjump_origin = { has_building = building_posthumous_employment_center } } event_target:riftjump_target = { add_building = building_posthumous_employment_center } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_toxic_bath_hive } } event_target:riftjump_target = { add_building = building_toxic_bath_hive } }
				if = { limit = { event_target:riftjump_origin = { has_building = building_toxic_bath_machine } } event_target:riftjump_target = { add_building = building_toxic_bath_machine } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_gen_exp_1 } } event_target:riftjump_target = { add_building = building_riftjump_gen_exp_1 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_gen_exp_2 } } event_target:riftjump_target = { add_building = building_riftjump_gen_exp_2 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_min_exp_1 } } event_target:riftjump_target = { add_building = building_riftjump_min_exp_1 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_min_exp_2 } } event_target:riftjump_target = { add_building = building_riftjump_min_exp_2 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_eat_exp_1 } } event_target:riftjump_target = { add_building = building_riftjump_eat_exp_1 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_eat_exp_2 } } event_target:riftjump_target = { add_building = building_riftjump_eat_exp_2 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_aly_exp_1 } } event_target:riftjump_target = { add_building = building_riftjump_aly_exp_1 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_aly_exp_2 } } event_target:riftjump_target = { add_building = building_riftjump_aly_exp_2 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_cgs_exp_1 } } event_target:riftjump_target = { add_building = building_riftjump_cgs_exp_1 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_cgs_exp_2 } } event_target:riftjump_target = { add_building = building_riftjump_cgs_exp_2 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_science_1 } } event_target:riftjump_target = { add_building = building_riftjump_science_1 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_science_2 } } event_target:riftjump_target = { add_building = building_riftjump_science_2 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_ref_exp_1 } } event_target:riftjump_target = { add_building = building_riftjump_ref_exp_1 } }
			#	if = { limit = { event_target:riftjump_origin = { has_building = building_riftjump_ref_exp_2 } } event_target:riftjump_target = { add_building = building_riftjump_ref_exp_2 } }
				
				every_owned_pop = {
					resettle_pop = {
						pop = this
						planet = event_target:riftjump_target
					}
				}
				solar_system = { remove_star_flag = riftjump_city_origin_system }
			}
		}
	}
}
