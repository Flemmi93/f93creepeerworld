namespace = riftjump_city

#normale RiftJump traveling via decision
planet_event = {
	id = riftjump_city.1
	is_triggered_only = yes

	title = riftjump_city.1.name
	desc = {
		text = riftjump_city.1.desc
		trigger = { exists = event_target:riftjump_target }
	}
	desc = {
		text = riftjump_city.1.desc2
		trigger = { NOT ={ exists = event_target:riftjump_target } }
	}
	picture = GFX_evt_news_room
	immediate = {
		save_event_target_as = riftjump_origin
		solar_system = { set_star_flag = riftjump_city_origin_system }
		#each random_system has fewer and fewer requirements, there should always be a viable path, landing in home systems or near them is the lowest priority
		random_system = {
			limit = {
				NOR = {
					has_star_flag = riftjump_city_origin_system
					exists = owner
					has_star_flag = hostile_system
					has_star_flag = guardian
					has_star_flag = enclave
					has_star_flag = primitive_system
					has_star_flag = lcluster
					has_star_flag = sealed_system
					any_fleet_in_system = {
						owner = {
							is_hostile = root.owner
						}
					}
					any_system_planet = { is_homeworld = yes }
					any_neighbor_system = {
						any_system_planet = { is_homeworld = yes }
					}
				}
				any_system_planet = {
					habitable_planet_not_urban = yes
					num_sapient_pops = 0
				}
			}
			random_system_planet = {
				limit = { habitable_planet_not_urban = yes }
				save_event_target_as = riftjump_target
			}
		}
		random_system = {
			limit = {
				NOR = {
					has_star_flag = riftjump_city_origin_system
					exists = owner
					has_star_flag = hostile_system
					has_star_flag = guardian
					has_star_flag = enclave
					has_star_flag = primitive_system
					has_star_flag = lcluster
					has_star_flag = sealed_system
					any_system_planet = { is_homeworld = yes }
					any_neighbor_system = {
						any_system_planet = { is_homeworld = yes }
					}
				}
				any_system_planet = {
					habitable_planet_not_urban = yes
					num_sapient_pops = 0
				}
			}
			random_system_planet = {
				limit = { habitable_planet_not_urban = yes }
				save_event_target_as = riftjump_target
			}
		}
		random_system = {
			limit = {
				NOR = {
					has_star_flag = riftjump_city_origin_system
					exists = owner
					any_system_planet = { is_homeworld = yes }
				}
				any_system_planet = {
					habitable_planet_not_urban = yes
					num_sapient_pops = 0
				}
			}
			random_system_planet = {
				limit = { habitable_planet_not_urban = yes }
				save_event_target_as = riftjump_target
			}
		}
		random_system = {
			limit = {
				NOR = {
					has_star_flag = riftjump_city_origin_system
					exists = owner
				}
				any_system_planet = {
					habitable_planet_not_urban = yes
					num_sapient_pops = 0
				}
			}
			random_system_planet = {
				limit = { habitable_planet_not_urban = yes }
				save_event_target_as = riftjump_target
			}
		}
	}
	option = {
		name = riftjump_city.1.a
		trigger = { exists = event_target:riftjump_target }
		owner = {
			every_controlled_fleet = {
				limit = {
					is_ship_class = shipclass_starbase
					solar_system = {
						has_star_flag = riftjump_city_origin_system
					}
				}
				destroy_fleet = this
			}
		}
	}

	option = {
		name = riftjump_city.1.b
		trigger = { NOT = { exists = event_target:riftjump_target } }
		owner = { add_resource = { energy = 1000 } }
	}

	after = {
		if = { limit = { exists = event_target:riftjump_target } 
			event_target:riftjump_target = {
				if = {
					limit = {
						num_free_districts = {
							type = any
							value < 5
						}
					}
					while = {
						count = 4
						random_deposit = { limit = { is_blocker = yes } clear_blocker = yes }
					}
				}
				create_colony = {
					owner = root
					species = root.owner_main_species
					ethos = owner
				}
				solar_system = {
					create_starbase = {
						owner = root
						size = starbase_starport
						module = shipyard
					}
				}
			}
			every_owned_pop = {
				resettle_pop = {
					pop = this
					planet = event_target:riftjump_target
				}
			}
			hidden_effect = {
			solar_system = { remove_star_flag = riftjump_city_origin_system }
			}
		}
	}
}
